// Generated by CoffeeScript 1.6.3
(function() {
  var BaseCollector, BusynessCollector, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseCollector = require('./base_collector');

  BusynessCollector = (function(_super) {
    __extends(BusynessCollector, _super);

    function BusynessCollector() {
      _ref = BusynessCollector.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BusynessCollector.HISTORY_HOLDING_SEC = 10;

    BusynessCollector.history = [];

    BusynessCollector.clear_history = function() {
      return BusynessCollector.history = [];
    };

    BusynessCollector.prototype.pre = function() {
      return this.pre_time = new Date();
    };

    BusynessCollector.prototype.post = function() {
      this.post_time = new Date();
      return BusynessCollector.history.push([this.pre_time, this.post_time]);
    };

    BusynessCollector.prototype.name = function() {
      return "busyness";
    };

    BusynessCollector.prototype.value = function() {
      if (BusynessCollector.history.length < 2) {
        return 0;
      } else {
        return (this.estimate_sec() / this.whole_sec()) * 100;
      }
    };

    BusynessCollector.prototype.fix_history = function() {
      var new_history;
      new_history = BusynessCollector.history.filter(function(h) {
        return ((this.post_time - h[1]) / 1000) > BusynessCollector.HISTORY_HOLDING_SEC;
      });
      return BusynessCollector.history = new_history;
    };

    BusynessCollector.prototype.whole_sec = function() {
      var newest_post, oldest_pre;
      oldest_pre = BusynessCollector.history[0][0];
      newest_post = BusynessCollector.history[BusynessCollector.history.length - 1][1];
      return (newest_post - oldest_pre) / 1000;
    };

    BusynessCollector.prototype.estimate_sec = function() {
      var h, post_time, pre_time, result, _i, _len, _ref1;
      result = 0.0;
      _ref1 = BusynessCollector.history;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        h = _ref1[_i];
        pre_time = h[0];
        post_time = h[1];
        result += post_time - pre_time;
      }
      return result / 1000;
    };

    return BusynessCollector;

  })(BaseCollector);

  module.exports = BusynessCollector;

}).call(this);
